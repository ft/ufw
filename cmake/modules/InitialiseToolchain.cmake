if(__UFW_InitialiseToolchain)
  return()
endif()
set(__UFW_InitialiseToolchain 1)

include(GNUAttributes)
include(GNUBuiltins)
include(GNUCompilerWarnings)
include(TICompilerWarnings)

macro(initialise_toolchain)

  if (NOT __UFW_ToolchainInitialised)
    get_property(languages GLOBAL PROPERTY ENABLED_LANGUAGES)
    list(FIND languages "CXX" with_cxx_lang)
    list(FIND languages "C" with_c_lang)
    set(_tag "InitToolchain")

    if ("${COMPILER_API}" STREQUAL "gnu")
      message(STATUS "${_tag}: Detected GNU-like Toolchain")
      if (${with_c_lang} GREATER_EQUAL 0)
        CheckAllGNUAttributes_C()
        CheckAllGNUBuiltins_C()
        GNUCCompilerWarnings()
        set(CMAKE_C_FLAGS_DEBUG "-O0 -ggdb")
        set(CMAKE_C_FLAGS_RELEASE "-O2")
        set(CMAKE_C_FLAGS_RELWITHDEBINFO "-Og -ggdb")
        set(CMAKE_C_FLAGS_MINSIZEREL "-Os")
      endif()
      if (${with_cxx_lang} GREATER_EQUAL 0)
        CheckAllGNUAttributes_CXX()
        CheckAllGNUBuiltins_CXX()
        GNUCXXCompilerWarnings()
        set(CMAKE_CXX_FLAGS_DEBUG "-O0 -ggdb")
        set(CMAKE_CXX_FLAGS_RELEASE "-O2")
        set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-Og -ggdb")
        set(CMAKE_CXX_FLAGS_MINSIZEREL "-Os")
      endif()
    elseif ("${COMPILER_API}" STREQUAL "ti")
      message(STATUS "${_tag}: Detected Texas Instruments Toolchain")
      if (${with_c_lang} GREATER_EQUAL 0)
        CheckAllGNUAttributes_C()
        CheckAllGNUBuiltins_C()
        set(CMAKE_C_FLAGS_DEBUG "-Ooff -g")
        set(CMAKE_C_FLAGS_RELEASE "-O3 --opt_for_speed=4")
        set(CMAKE_C_FLAGS_RELWITHDEBINFO "-Og -g")
        set(CMAKE_C_FLAGS_MINSIZEREL "-O3 --opt_for_speed=0")
      endif()
      if (${with_cxx_lang} GREATER_EQUAL 0)
        CheckAllGNUAttributes_CXX()
        CheckAllGNUBuiltins_CXX()
        set(CMAKE_CXX_FLAGS_DEBUG "-Ooff -g")
        set(CMAKE_CXX_FLAGS_RELEASE "-O3 --opt_for_speed=4")
        set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-Og -g")
        set(CMAKE_CXX_FLAGS_MINSIZEREL "-O3 --opt_for_speed=0")
      endif()
    else()
      message(WARNING "${_tag}: Unknown COMPILER_API: ${COMPILER_API}")
    endif()

    set(__UFW_ToolchainInitialised 1)
  endif()

endmacro()

function(MakeStrictCompilerC target)
  if ("${COMPILER_API}" STREQUAL "gnu")
    GNUMakeStrictCCompiler(${target})
  elseif ("${COMPILER_API}" STREQUAL "ti")
    TIMakeStrictCCompiler(${target})
  else()
    message(WARNING "${_tag}: Unknown COMPILER_API: ${COMPILER_API}")
  endif()
endfunction()

function(MakeStrictCompilerCXX target)
  if ("${COMPILER_API}" STREQUAL "gnu")
    GNUMakeStrictCXXCompiler(${target})
  elseif ("${COMPILER_API}" STREQUAL "ti")
    TIMakeStrictCXXCompiler(${target})
  else()
    message(WARNING "${_tag}: Unknown COMPILER_API: ${CXXOMPILER_API}")
  endif()
endfunction()

function(MakeFatalCompilerC target)
  if ("${COMPILER_API}" STREQUAL "gnu")
    GNUMakeFatallyStrictCCompiler(${target} ${ARGS})
  elseif ("${COMPILER_API}" STREQUAL "ti")
    TIMakeFatallyStrictCCompiler(${target} ${ARGS})
  else()
    message(WARNING "${_tag}: Unknown COMPILER_API: ${COMPILER_API}")
  endif()
endfunction()

function(MakeFatalCompilerCXX target)
  if ("${COMPILER_API}" STREQUAL "gnu")
    GNUMakeFatallyStrictCXXCompiler(${target} ${ARGS})
  elseif ("${COMPILER_API}" STREQUAL "ti")
    TIMakeFatallyStrictCXXCompiler(${target} ${ARGS})
  else()
    message(WARNING "${_tag}: Unknown COMPILER_API: ${CXXOMPILER_API}")
  endif()
endfunction()

if(__UFW_InitialiseToolchain)
  return()
endif()
set(__UFW_InitialiseToolchain 1)

include(GNUAttributes)
include(GNUBuiltins)
include(GNUCompilerWarnings)
include(TICompilerWarnings)

function(ufw_toolchain_id_adjust compiler outvar)
  if (${compiler} STREQUAL gnu)
    set(compiler gcc)
  endif()
  if (ARCH AND (${ARCH} MATCHES posix))
    set(${outvar} "${compiler}-native" PARENT_SCOPE)
  elseif (ARCH AND (${ARCH} MATCHES arm))
    set(${outvar} "${compiler}-arm" PARENT_SCOPE)
  endif()
endfunction()

function(ufw_compiler_api_adjust outvar)
  if (COMPILER AND (${COMPILER} MATCHES gcc))
    set(${outvar} "gnu" PARENT_SCOPE)
  elseif (COMPILER AND (${COMPILER} MATCHES clang))
    set(${outvar} "gnu" PARENT_SCOPE)
  else()
    message(WARNING "ufw: Zephyr detected but unsupported toolchain!")
    message(WARNING "ufw: TOOLCHAIN: ${ZEPHYR_TOOLCHAIN_VARIANT}")
    message(WARNING "ufw: COMPILER: ${COMPILER}")
  endif()
endfunction()

function(ufw_status_zephyr var name)
  if (${var})
    message(STATUS "ufw: Zephyr ${name}: ${${var}}")
  else()
    message(WARNING "ufw: Zephyr detected but ${name} unset (${var})")
  endif()
endfunction()

function(ufw_toolchain_adjust_zephyr)
  ufw_status_zephyr(COMPILER Compiler)
  ufw_status_zephyr(LINKER Linker)
  ufw_status_zephyr(BINTOOLS Bintools)
  ufw_status_zephyr(ARCH Architecture)
  ufw_compiler_api_adjust(_compiler_api)
  ufw_toolchain_id_adjust("${_compiler_api}" _toolchain_id)
  set(COMPILER_API "${_compiler_api}" PARENT_SCOPE)
  set(TOOLCHAIN_ID "${_toolchain_id}" PARENT_SCOPE)
endfunction()

macro(initialise_toolchain)

  if (NOT __UFW_ToolchainInitialised)
    if (ZEPHYR_TOOLCHAIN_VARIANT)
      ufw_toolchain_adjust_zephyr()
    endif()
    get_property(languages GLOBAL PROPERTY ENABLED_LANGUAGES)
    list(FIND languages "CXX" with_cxx_lang)
    list(FIND languages "C" with_c_lang)
    set(_tag "InitToolchain")

    if ("${COMPILER_API}" STREQUAL "gnu")
      message(STATUS "${_tag}: Detected GNU-like Toolchain")
      if (${with_c_lang} GREATER_EQUAL 0)
        CheckAllGNUAttributes_C()
        CheckAllGNUBuiltins_C()
        GNUCCompilerWarnings()
        # Clang only supports -Og starting at version 4.0, so:
        check_c_compiler_flag(-Og UFW_CC_HAS_Og)
        set(CMAKE_C_FLAGS_DEBUG "-DDEBUG -O0 -ggdb")
        set(CMAKE_C_FLAGS_RELEASE "-DNDEBUG -O2")
        if (UFW_CC_HAS_Og)
          set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-DNDEBUG -Og -ggdb")
        else()
          set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-DNDEBUG -O1 -ggdb")
        endif()
        set(CMAKE_C_FLAGS_MINSIZEREL "-DNDEBUG -Os")
      endif()
      if (${with_cxx_lang} GREATER_EQUAL 0)
        CheckAllGNUAttributes_CXX()
        CheckAllGNUBuiltins_CXX()
        GNUCXXCompilerWarnings()
        check_cxx_compiler_flag(-Og UFW_CXX_HAS_Og)
        set(CMAKE_CXX_FLAGS_DEBUG "-DDEBUG -O0 -ggdb")
        set(CMAKE_CXX_FLAGS_RELEASE "-DNDEBUG -O2")
        if (UFW_CXX_HAS_Og)
          set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-DNDEBUG -Og -ggdb")
        else()
          set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-DNDEBUG -O1 -ggdb")
        endif()
        set(CMAKE_CXX_FLAGS_MINSIZEREL "-DNDEBUG -Os")
      endif()
    elseif ("${COMPILER_API}" STREQUAL "ti")
      message(STATUS "${_tag}: Detected Texas Instruments Toolchain")
      if (${with_c_lang} GREATER_EQUAL 0)
        CheckAllGNUAttributes_C()
        CheckAllGNUBuiltins_C()
        set(CMAKE_C_FLAGS_DEBUG "--define=DEBUG -Ooff -g")
        set(CMAKE_C_FLAGS_RELEASE "--define=NDEBUG -O3 --opt_for_speed=4")
        set(CMAKE_C_FLAGS_RELWITHDEBINFO "--define=NDEBUG -O0 -g")
        set(CMAKE_C_FLAGS_MINSIZEREL "--define=NDEBUG -O3 --opt_for_speed=0")
      endif()
      if (${with_cxx_lang} GREATER_EQUAL 0)
        CheckAllGNUAttributes_CXX()
        CheckAllGNUBuiltins_CXX()
        set(CMAKE_CXX_FLAGS_DEBUG "--define=DEBUG -Ooff -g")
        set(CMAKE_CXX_FLAGS_RELEASE "--define=NDEBUG -O3 --opt_for_speed=4")
        set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "--define=NDEBUG -O0 -g")
        set(CMAKE_CXX_FLAGS_MINSIZEREL "--define=NDEBUG -O3 --opt_for_speed=0")
      endif()
    else()
      message(WARNING "${_tag}: Unknown COMPILER_API: ${COMPILER_API}")
    endif()

    set(__UFW_ToolchainInitialised 1)
  endif()

endmacro()

function(MakeStrictCompilerC target)
  if ("${COMPILER_API}" STREQUAL "gnu")
    GNUMakeStrictCCompiler(${target})
  elseif ("${COMPILER_API}" STREQUAL "ti")
    TIMakeStrictCCompiler(${target})
  else()
    message(WARNING "${_tag}: Unknown COMPILER_API: ${COMPILER_API}")
  endif()
endfunction()

function(MakeStrictCompilerCXX target)
  if ("${COMPILER_API}" STREQUAL "gnu")
    GNUMakeStrictCXXCompiler(${target})
  elseif ("${COMPILER_API}" STREQUAL "ti")
    TIMakeStrictCXXCompiler(${target})
  else()
    message(WARNING "${_tag}: Unknown COMPILER_API: ${CXXOMPILER_API}")
  endif()
endfunction()

function(MakeFatalCompilerC target)
  if ("${COMPILER_API}" STREQUAL "gnu")
    GNUMakeFatallyStrictCCompiler(${target} ${ARGS})
  elseif ("${COMPILER_API}" STREQUAL "ti")
    TIMakeFatallyStrictCCompiler(${target} ${ARGS})
  else()
    message(WARNING "${_tag}: Unknown COMPILER_API: ${COMPILER_API}")
  endif()
endfunction()

function(MakeFatalCompilerCXX target)
  if ("${COMPILER_API}" STREQUAL "gnu")
    GNUMakeFatallyStrictCXXCompiler(${target} ${ARGS})
  elseif ("${COMPILER_API}" STREQUAL "ti")
    TIMakeFatallyStrictCXXCompiler(${target} ${ARGS})
  else()
    message(WARNING "${_tag}: Unknown COMPILER_API: ${CXXOMPILER_API}")
  endif()
endfunction()

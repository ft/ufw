#!/bin/sh

usage () {
    cat <<EOF
usage: ./run [OPTION(s)...] SUB-COMMAND [ARG(s)...]

Available Sub-Commands:

  init      - Initialise fuzzer build.
  clean     - Clean up artefacts generated by "init".
  fuzzer    - Run AFL++ for a given program.

  configure - Run configuration step of ufw with afl.
  build     - Run build step of ufw with afl.

Options:

  -h   Displays this help text.

EOF
}

usage_init () {
    cat <<EOF
usage: ./run init [OPTION(s)...]

Options:

  -h           Display this help text.
  -m           Only initialise afl-compiler and afl-runner.
  -A           AFL++ source directory
  -c COMPILER  Set compiler to COMPILER instead of "afl-clang".
  -r RUNNER    Set fuzzing runner to RUNNER instead of "afl-fuzz".

EOF
}

usage_clean () {
    cat <<EOF
usage: ./run clean [OPTION(s)...]

Options:

  -h    Display this help text.
  -a    Remove fuzzer output data as well.

EOF
}

usage_fuzzer () {
    cat <<EOF
usage: ./run fuzzer [OPTION(s)...] PROGRAM [ARGUMENT(s)...]

This runs PROGRAM in AFL++ fuzzer runner. Any excess arguments after the
program name will be passed to the runner as well.

Options:

  -h    Display this help text.

EOF
}

is_opt () {
    case "$1" in
    -*) return 0 ;;
    *)  return 1 ;;
    esac
}

while is_opt "$1"; do
    case "$1" in
    -h) usage
        exit 0
        ;;
    *) printf 'Unknown option: %s\n\n' "$1"
       usage
       exit 1
       ;;
    esac
    shift
done

if [ "$#" -eq 0 ]; then
    usage
    exit 1
fi

subcmd="$1"
shift

run_configure () {
    if [ "$#" -gt 0 ]; then
        printf 'configure: Too many arguments.\n\n'
        usage_clean
        exit 1
    fi
    if [ ! -e afl-compiler ]; then
        printf 'configure: Compiler unconfigured. Try "run init" before.\n'
        return 1
    fi
    afl_compiler=$(cat afl-compiler)
    cmake -GNinja -DCMAKE_C_COMPILER="$afl_compiler" -Bbuild-afl -S..
}

run_build () {
    if [ "$#" -gt 0 ]; then
        printf 'build: Too many arguments.\n\n'
        usage_clean
        exit 1
    fi
    if [ ! -d build-afl ]; then
        printf 'build: ALF++ enabled build could not be found.\n'
        printf 'build: Use "run configure" to make it available.\n'
        return 1
    fi
    cmake --build build-afl
}

run_init () {
    afl_root=''
    afl_compiler='afl-clang'
    afl_runner='afl-fuzz'
    minimal='no'
    while is_opt "$1"; do
        case "$1" in
        -h) usage_init
            exit 0
            ;;
        -m) minimal='yes'
            ;;
        -A) afl_root="$2"
            shift
            ;;
        -c) afl_compiler="$2"
            shift
            ;;
        -r) afl_runner="$2"
            shift
            ;;
        *) printf 'init: Unknown option: %s\n\n' "$1"
           usage_init
           exit 1
           ;;
        esac
        shift
    done

    if [ "$#" -gt 0 ]; then
        printf 'init: Too many arguments.\n\n'
        usage_init
        exit 1
    fi

    printf 'Setting up afl-compiler...\n'
    if [ -n "$afl_root" ]; then
        printf '%s/%s\n' "$afl_root" "$afl_compiler" > afl-compiler
    else
        printf '%s\n' "$afl_compiler" > afl-compiler
    fi
    afl_compiler=$(cat afl-compiler)
    printf 'Setting up afl-compiler... %s\n' "$afl_compiler"
    printf 'Setting up afl-runner...\n'
    if [ -n "$afl_root" ]; then
        printf '%s/%s\n' "$afl_root" "$afl_runner" > afl-runner
    else
        printf '%s\n' "$afl_runner" > afl-runner
    fi
    afl_runner=$(cat afl-runner)
    printf 'Setting up afl-runner... %s\n' "$afl_runner"

    if [ "$minimal" = "no" ]; then
        if [ -d build-afl ]; then
            printf 'init: build-afl exist. Not re-building again.\n'
            printf 'init: Use "run clean" to force rebuilding.\n'
            exit 0
        fi

        mkdir build-afl || exit 1
        run_configure || exit 1
        run_build || exit 1
    fi

    exit 0
}

run_fuzzer () {
    while is_opt "$1"; do
        case "$1" in
        -h) usage_fuzzer
            exit 0
            ;;
        *) printf 'fuzzer: Unknown option: %s\n\n' "$1"
           usage_fuzzer
           exit 1
           ;;
        esac
        shift
    done

    if [ "$#" = 0 ]; then
        printf 'fuzzer: Too few arguments.\n\n'
        usage_fuzzer
        exit 1
    fi

    prg="$1"
    shift

    if [ "$prg" = "build-afl" ]; then
        printf 'fuzzer: %s is not a valid program to run.\n' "$prg"
        exit 1
    fi

    if [ ! -d build-afl ]; then
        printf 'fuzzer: ALF++ enabled build could not be found.\n'
        printf 'fuzzer: Use "run init" to make it available.\n'
        exit 1
    fi

    if [ ! -d "$prg" ]; then
        printf 'fuzzer: No sub-directory for program %s.\n' "$prg"
        exit 1
    fi

    afl_runner=$(cat afl-runner)
    AFL_SKIP_CPUFREQ=1
    export AFL_SKIP_CPUFREQ
    set -x
    exec "$afl_runner" -i "$prg"/in              \
                       -o "$prg"/out             \
                       "$@"                      \
                       build-afl/examples/"$prg"
}

run_clean () {
    clean_all='no'
    while is_opt "$1"; do
        case "$1" in
        -h) usage_clean
            exit 0
            ;;
        -a) clean_all='yes' ;;
        *) printf 'clean: Unknown option: %s\n\n' "$1"
           usage_clean
           exit 1
           ;;
        esac
        shift
    done

    if [ "$#" -gt 0 ]; then
        printf 'clean: Too many arguments.\n\n'
        usage_clean
        exit 1
    fi

    printf 'Cleaning artefacts...\n'
    rm -Rf build-afl afl-compiler afl-runner || exit 1
    if [ "$clean_all" = 'yes' ]; then
        printf 'Cleaning fuzzer outputs...\n'
        rm -Rf ex-*/out || exit 1
    fi
    exit 0
}

case "$subcmd" in
build)     run_build     "$@" && exit 0 ;;
clean)     run_clean     "$@"           ;;
configure) run_configure "$@" && exit 0 ;;
fuzzer)    run_fuzzer    "$@"           ;;
init)      run_init      "$@"           ;;
*) usage
   exit 1
   ;;
esac
exit 1

;; Copyright (c) 2022 ufw workers, All rights reserved.
;;
;; Terms for redistribution and use can be found in LICENCE.

;; Generate frontend macros for register table API.
;;
;; These macros are a fair bit repetitive, and typing them out by hand is error
;; prone, especially with the addition of per-register user-pointers.
;;
;; Instead this script generates the entire list of macros. This is done not
;; automatically, but when required by a developer whenever updates to these
;; macros are required.
;;
;; The ‘register-types’ and ‘variants’ variables in the body of this program
;; specify which type/variant combinations of C macros are being generated.

(use-modules (ice-9 format)
             (ice-9 match)
             (srfi srfi-1)
             (ufw register-table))

;; This specifies the types that the register-table implementation can store in
;; its registers. The mnemonics entry is a list of pairs of symbols. The first
;; entry in the pair is the short-hand prefix and the second is the long prefix
;; used in different parts of the implementation.
;;
;; For example: unsigned 32-bit registers use u32 and uint32 names.
(define register-types '(((mnemonics (u . uint)
                                     (s . sint))
                          (widths 16 32 64))
                         ((mnemonics (f . float))
                          (widths 32))))

;; For every type specified in ‘register-types’, this program generates a
;; number of macros that simplify the definition of register tables using ufw.
;; This specifies the variants of macros that are available. For each variant
;; two macros are generated: One that supports user-pointers and one that does
;; not.
;;
;; This is a list of lists, where the inner lists are composed of a name and a
;; function that actually generates the C macro's code. If the name is #f the
;; name portion is left out of the frontend's name. If the name is a list of
;; two of symbols, the first symbol is used for the frontend's name, the second
;; for the backend's name.
;;
;; The ’←’ macro is used to define the handler functions. The arguments to the
;; macro are a list of symbols (unquoted) that are used to generate the the
;; argument lists of the final C macros generated by this program.
(define variants
  `((#f              ,(←))
    (min             ,(← MIN))
    (max             ,(← MAX))
    (range           ,(← MIN MAX))
    ((fnc validator) ,(← FNC))))

;; Generate code from specifications. This is a list of records that look like
;; this:
;;
;;     (user-pointer? FRONTEND BACKEND)
;;
;; These records can be printed by ‘print-tabular-macro’.
(define generated-code
  (concatenate (map (lambda (t) (generate-type-macros variants t))
                    register-types)))

;; Compute the longest (in characters) FRONTEND definition in ‘generated-code’.
;; This is used to generate macros in a tabular manner.
(define longest-frontend
  (apply max (map (compose string-length second) generated-code)))

;; Finally print the generated code to stdout.
(tabular-macros generated-code longest-frontend)
